function [speed distance euclid persistence theta yfmi xfmi deltaY deltaX frames] = migrationStats(tracks, interval_time, pixel_micron)


% PURPOSE:

%       Calculate the statistics from X/Y positional data obtained from track.m
%       output

% INPUT: 
% 
%       tracks: tracks matrix generated by track.m
%        column1: x-position
%        column2: y-position
%        column3: frame
%        column4: track number
%       interval_time: number for hr or min 
%       pixel_micron: unit of distance equivalent to 1 pixel


% OUTPUT: 

%       variables of speed, distance, euclidean displacement,
%       persistence, angular displacement, yFMI, xFMI, y-displacement, 
%       x-displacement and frames

speed = [];
distance = [];
frames = [];
euclid = [];
persistence = [];
theta = [];
initial = [];
final = [];
deltaX = [];
deltaY = [];

cell_number = unique(tracks(:,4));

for i = cell_number'
    data = tracks(tracks(:,4) == i, :);
    % obtain X-axis and Y-axis positional data for the specified track
    X = data(:,1); 
    Y = data(:,2);
    
    x1 = X(1);
    xEnd = X(end);
    y1 = Y(1);
    yEnd = Y(end);
    initial = [initial; x1 y1];
    final = [final; xEnd yEnd];
    delX = xEnd - x1;
    delY = yEnd - y1;
    deltaX = [deltaX; delX];
    deltaY = [deltaY; delY];
    % calculate euclidean distance (vector displacement of the cell)
    E = sqrt((delX)^2 + (delY)^2);
    euclid = [euclid; E];
    
     % add subsequent displacements of the cell
    cumulative_displacements = [cumsum(sqrt(diff(X(:)).^2 + diff(Y(:)).^2))]; 
    
    % sum of the displacements between each cell centroid for the given
    % track
    distance = [distance; max(cumulative_displacements)]; 
    
    % calculate cell persistence
    persistence = [persistence; E/max(cumulative_displacements)]; 
    
    
    % total number of frames that cell centroid was tracked ( can be
    % greater than number of frames where centroid was identified given the
    % param.mem parameter
    % total number of time intervals through which the cell has been tracked
    totalframes = data(end, 3) - data(1, 3); 
    
    % sum of all individual displacemnts divided by the time that cell
    % centroid was tracked
    ds_dt = max(cumulative_displacements)/(totalframes*interval_time);
    speed = [speed; ds_dt];
    
    frames = [frames; totalframes];

    

    
end

% calculate angular displacement of cells trajectory
arccos = deltaX./euclid;
theta = acos(arccos);

for j = 1:size(arccos, 1)
    if  arccos(j) < 0 & deltaY(j) > 0
        theta(j) = 2*pi - theta(j);
    end
    if arccos(j) > 0 & deltaY(j) > 0
        theta(j) = 2*pi - theta(j);
    end
end

%theta = theta.*((2*pi)/360);
deltaY = deltaY*-1;
yfmi = deltaY./distance;
xfmi = deltaX./distance;
deltaY = deltaY.*pixel_micron;
deltaX = deltaX.*pixel_micron;
speed = speed.*pixel_micron;
distance = distance.*pixel_micron;
euclid = euclid.*pixel_micron;

